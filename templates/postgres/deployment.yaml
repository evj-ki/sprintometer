apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    {{- include "postgres.appLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgres.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: postgres
          image: {{ .Values.postgres.image.name }}:{{ .Values.postgres.image.tag }}
          env:
            - name: POSTGRES_DB
              value: "{{ .Values.postgres.env.postgres.db }}"
            - name: POSTGRES_USER
              value: "{{ .Values.postgres.env.postgres.user }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.postgres.env.postgres.password }}"
          ports:
            - name: postgres
              containerPort: 5432
          resources:
            limits:
              memory: {{ .Values.postgres.resources.limits.memory }}
              cpu: {{ .Values.postgres.resources.limits.cpu }}
            requests:
              memory: {{ .Values.postgres.resources.requests.memory }}
              cpu: {{ .Values.postgres.resources.requests.cpu }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-init
      volumes:
        {{- if .Values.postgres.volume.mounted }}
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        {{- else }}
        - name: postgres-storage
          emptyDir: { }
        {{- end }}
        - name: postgres-init
          configMap:
            name: postgres-init